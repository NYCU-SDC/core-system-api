openapi: 3.1.0
info:
  title: Core System API
  version: 1.0.0
tags:
  - name: Healthz
  - name: Auth
  - name: User
  - name: Unit
  - name: Forms
  - name: Responses
  - name: Inbox
paths:
  /api/auth/login/oauth/{provider}:
    get:
      operationId: Auth_loginGoogle
      parameters:
        - name: provider
          in: path
          required: true
          description: The OAuth2 provider to use for login.
          schema:
            $ref: '#/components/schemas/Auth.OAuthProviders'
        - name: c
          in: query
          required: true
          description: The callback URL of the OAuth2 login. [See details](https://clustron.atlassian.net/wiki/spaces/CS/pages/41320449/Authentication+Process)
          schema:
            type: string
          explode: false
        - name: r
          in: query
          required: false
          description: The redirect URL for login callback.
          schema:
            type: string
          explode: false
      responses:
        '302':
          description: Redirection
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Auth
  /api/auth/refresh/{refreshToken}:
    post:
      operationId: Auth_refreshToken
      parameters:
        - name: refreshToken
          in: path
          required: true
          description: The refresh token to use for refreshing the access token.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth.RefreshToken'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Auth
  /api/forms:
    get:
      operationId: Forms_listForms
      description: List all existing forms.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Forms.Form'
      tags:
        - Forms
  /api/forms/{formId}/questions:
    post:
      operationId: Forms_createQuestion
      description: Create a new question for a specific form.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Question'
      tags:
        - Forms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forms.QuestionRequest'
    get:
      operationId: Forms_listQuestions
      description: List all the questions of a specific form.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Forms.Question'
      tags:
        - Forms
  /api/forms/{formId}/questions/{questionId}:
    put:
      operationId: Forms_updateQuestion
      description: Update an existing question by its unique identifier.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: questionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Question'
      tags:
        - Forms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forms.QuestionRequest'
    delete:
      operationId: Forms_deleteQuestion
      description: Delete an existing question by its unique identifier.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: questionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Forms
    get:
      operationId: Responses_getQuestionAnswers
      description: Get all answers for a specific question across all form responses.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: questionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Responses.AnswersForQuestionResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
  /api/forms/{formId}/responses:
    post:
      operationId: Responses_submitFormResponse
      description: Submit a new response to a form.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responses.SubmitResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Responses.SubmitRequest'
    get:
      operationId: Responses_listFormResponses
      description: List all responses for a specific form.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responses.ListResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
  /api/forms/{formId}/responses/{responseId}:
    get:
      operationId: Responses_getFormResponse
      description: Get a specific response by ID.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: responseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responses.GetResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
    delete:
      operationId: Responses_deleteFormResponse
      description: Delete a response and all its associated data.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: responseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
  /api/forms/{id}:
    put:
      operationId: Forms_updateForm
      description: Update an existing form by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Form'
      tags:
        - Forms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forms.FormRequest'
    delete:
      operationId: Forms_deleteForm
      description: Delete an existing form by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Forms
    get:
      operationId: Forms_getFormById
      description: Get a specific form by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Form'
      tags:
        - Forms
  /api/healthz:
    get:
      operationId: Healthz_checkHealthz
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Healthz
  /api/inbox:
    get:
      operationId: Inbox_getInboxMessages
      description: Get all the preview of the inbox messages with pagination.
      parameters:
        - name: isRead
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: isStarred
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: isArchived
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          explode: false
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Inbox.UserInboxMessage'
                  totalPages:
                    type: integer
                    format: int32
                  totalItems:
                    type: integer
                    format: int32
                  currentPage:
                    type: integer
                    format: int32
                  pageSize:
                    type: integer
                    format: int32
                  hasNextPage:
                    type: boolean
                required:
                  - items
                  - totalPages
                  - totalItems
                  - currentPage
                  - pageSize
                  - hasNextPage
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Inbox
  /api/inbox/{id}:
    put:
      operationId: Inbox_updateInboxMessageFlag
      description: Update flags for the user inbox message.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox.UserInboxMessage'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Inbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isRead:
                  type: boolean
                  default: false
                isStarred:
                  type: boolean
                  default: false
                isArchived:
                  type: boolean
                  default: false
  /api/orgs:
    get:
      operationId: Unit_getAllOrganizations
      description: Get all organizations
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit.Organization'
      tags:
        - Unit
    post:
      operationId: Unit_createOrg
      description: Create a new unit or organization
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit.Organization'
      tags:
        - Unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit.CreateOrgRequest'
  /api/orgs/relations:
    post:
      operationId: Unit_addParentChild
      description: Create a new parent-child relationship between units by linking them
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit.ParentChild'
      tags:
        - Unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit.ParentChildRequest'
  /api/orgs/relations/parent-id/{parent_id}/child-id/{child_id}:
    delete:
      operationId: Unit_removeParentChild
      description: Remove a parent-child relationship between units by unlinking them
      parameters:
        - name: parent_id
          in: path
          required: true
          schema:
            type: string
        - name: child_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            text/plain:
              schema:
                type: string
      tags:
        - Unit
  /api/orgs/{slug}:
    get:
      operationId: Unit_getOrgById
      description: Get a specific unit with the slug of its organization by its unique identifier
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit.Organization'
      tags:
        - Unit
    put:
      operationId: Unit_updateOrg
      description: Update an existing unit or organization by its unique identifier
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit.Organization'
      tags:
        - Unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit.UpdateOrgRequest'
    delete:
      operationId: Unit_deleteOrg
      description: Delete a specific organization by its unique identifier
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            text/plain:
              schema:
                type: string
      tags:
        - Unit
  /api/orgs/{slug}/unit-ids:
    get:
      operationId: Unit_listOrgSubUnitIds
      description: List all unit IDs, optionally filtered by parent organization ID
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: query
          required: false
          description: The parent unit ID used to filter subunits by their parent-child relationship
          schema:
            $ref: '#/components/schemas/uuid'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/uuid'
      tags:
        - Unit
  /api/orgs/{slug}/units:
    get:
      operationId: Unit_listOrgSubUnits
      description: List all units, optionally filtered by parent organization ID
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: query
          required: false
          description: The parent unit ID used to filter subunits by their parent-child relationship
          schema:
            $ref: '#/components/schemas/uuid'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit.Unit'
      tags:
        - Unit
    post:
      operationId: Unit_createUnit
      description: Create a new unit or organization
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit.Unit'
      tags:
        - Unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit.CreateUnitRequest'
  /api/orgs/{slug}/units/{id}:
    get:
      operationId: Unit_getUnitById
      description: Get a specific unit with the slug of its organization by its unique identifier
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit.Unit'
      tags:
        - Unit
    put:
      operationId: Unit_updateUnit
      description: Update an existing unit or organization by its unique identifier
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit.Unit'
      tags:
        - Unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit.UpdateUnitRequest'
    delete:
      operationId: Unit_deleteUnit
      description: Delete a specific unit of an organization by its unique identifier
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            text/plain:
              schema:
                type: string
      tags:
        - Unit
  /api/orgs/{slug}/units/{id}/subunit-ids:
    get:
      operationId: Unit_listUnitSubUnitIds
      description: List all unit IDs, optionally filtered by parent unit ID
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: parentId
          in: query
          required: false
          description: The parent unit ID used to filter subunits by their parent-child relationship
          schema:
            $ref: '#/components/schemas/uuid'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/uuid'
      tags:
        - Unit
  /api/orgs/{slug}/units/{id}/subunits:
    get:
      operationId: Unit_listUnitSubUnits
      description: List all units, optionally filtered by parent unit ID
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: parentId
          in: query
          required: false
          description: The parent unit ID used to filter subunits by their parent-child relationship
          schema:
            $ref: '#/components/schemas/uuid'
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit.Unit'
      tags:
        - Unit
  /api/orgs/{slug}/units/{unitId}/forms:
    post:
      operationId: Unit_createUnitForm
      description: Create a new form under a unit.
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: unitId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Form'
      tags:
        - Unit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forms.FormRequest'
    get:
      operationId: Unit_listFormsByUnit
      description: List forms under a specific unit.
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: unitId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Forms.Form'
      tags:
        - Unit
  /api/users/me:
    get:
      operationId: User_getMe
      description: Get the current user's information.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.User'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      tags:
        - User
components:
  schemas:
    Auth.OAuthProviders:
      type: string
      enum:
        - google
    Auth.RefreshToken:
      type: object
      required:
        - accessToken
        - expirationTime
        - refreshToken
      properties:
        accessToken:
          type: string
          description: The access token and formatted as JWT
        expirationTime:
          type: integer
          description: The expiration date of the refresh token.
        refreshToken:
          type: string
          description: The new refresh token.
    Forms.Form:
      type: object
      required:
        - id
        - title
        - description
        - unitId
        - lastEditor
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The form's unique identifier.
        title:
          type: string
          description: The title of the form.
        description:
          type: string
          description: The description written in the form to show user info.
        unitId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unit this form belongs to.
        lastEditor:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The user who last editted the form.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the form.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the form
      description: The structure of a form.
    Forms.FormRequest:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          description: The title of the form.
        description:
          type: string
          description: The description of the form.
      description: The request body for creating/updating a form.
    Forms.Question:
      type: object
      required:
        - id
        - formId
        - required
        - type
        - title
        - description
        - order
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The question's unique identifier.
        formId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: "The form's id that the question belongs to. "
        required:
          type: boolean
          description: Whether the question is required to answer or not.
        type:
          allOf:
            - $ref: '#/components/schemas/Forms.QuestionTypes'
          description: The type of the question.
        title:
          type: string
          description: What is the question.
        description:
          type: string
          description: More details of this question.
        order:
          type: integer
          format: int32
          description: What is the number of this question in the form.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the question.
        updatedAt:
          type: string
          format: date-time
          description: The updated timestamp of the question.
      description: The structure of a question.
    Forms.QuestionRequest:
      type: object
      required:
        - required
        - type
        - label
        - description
        - order
      properties:
        required:
          type: boolean
        type:
          $ref: '#/components/schemas/Forms.QuestionTypes'
        label:
          type: string
        description:
          type: string
        order:
          type: integer
          format: int32
      description: The request body for creating/updating a question.
    Forms.QuestionTypes:
      type: string
      enum:
        - short_text
        - long_text
        - single_choice
        - multiple_choice
        - date
      description: The current types of question
    Inbox.InboxMessage:
      type: object
      required:
        - id
        - postedBy
        - title
        - type
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unique identifier of an inbox message.
        postedBy:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The sender's unitId. If not specified, defaults to the uuid referring to a unit with the organization's name.
        title:
          type: string
          description: The title of the inbox message.
        subtitle:
          type: string
          description: The subtitle of the inbox message.
        type:
          type: string
          enum:
            - text
            - form
          description: The type of the content.
        contentId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: (Optional) The identifier of the content referenced by the contentType.
        createdAt:
          type: string
          format: date-time
          description: The create timestamp of the inbox message.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the inbox message.
      description: The structure of a full inbox message.
    Inbox.UserInboxMessage:
      type: object
      required:
        - id
        - message
        - type
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The id of this UserInboxMessage.
        message:
          allOf:
            - $ref: '#/components/schemas/Inbox.InboxMessage'
          description: The inbox message this user inbox message refers to.
        type:
          allOf:
            - $ref: '#/components/schemas/Inbox.UserInboxMessageFilters'
          description: The type of the user inbox message.
      description: The structure of a user inbox message with customized flag.
    Inbox.UserInboxMessageFilters:
      type: object
      required:
        - isRead
        - isStarred
        - isArchived
      properties:
        isRead:
          type: boolean
          description: Indicates whether the user has read the inbox message.
          default: false
        isStarred:
          type: boolean
          description: User can mark the inbox message as starred.
          default: false
        isArchived:
          type: boolean
          description: User can archive the inbox message and hide it from the inbox view.
          default: false
      description: The filters that can be applied by the user for their inbox messages.
    NotFound:
      type: object
      required:
        - title
        - status
        - type
        - detail
      properties:
        title:
          type: string
          enum:
            - Not Found
        status:
          type: number
          enum:
            - 404
        type:
          type: string
          enum:
            - https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
        detail:
          type: string
    ProblemDetail:
      type: object
      required:
        - title
        - status
        - type
        - detail
      properties:
        title:
          type: string
          description: The problem's title.
        status:
          type: integer
          description: The problem's status code.
        type:
          type: string
          description: Type indicates the URI that identifies the problem type, we use an MDN URI here.
        detail:
          type: string
          description: The problem's detail.
      description: Problem represents a problem detail as defined in RFC 7807
    Responses.AnswerForQuestionResponse:
      type: object
      required:
        - id
        - responseId
        - submittedBy
        - value
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The answer's unique identifier.
        responseId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The response this answer belongs to.
        submittedBy:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The user who submitted this answer.
        value:
          type: string
          description: The answer value.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the answer.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the answer.
      description: Response model for a single answer in question answers view
    Responses.AnswerRequest:
      type: object
      required:
        - questionId
        - value
      properties:
        questionId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The question being answered.
        value:
          type: string
          description: The answer value (format depends on questionType from questionId).
      description: Request model for submitting an individual answer
    Responses.AnswersForQuestionResponse:
      type: object
      required:
        - question
        - answers
      properties:
        question:
          allOf:
            - $ref: '#/components/schemas/Forms.Question'
          description: The question details.
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Responses.AnswerForQuestionResponse'
          description: All answers for this question.
      description: Response model for getting all answers for a specific question
    Responses.GetResponse:
      type: object
      required:
        - id
        - formId
        - submittedBy
        - questionAnswerPairs
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The response's unique identifier.
        formId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The form that this response belongs to.
        submittedBy:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The user who submitted this response.
        questionAnswerPairs:
          type: array
          items:
            $ref: '#/components/schemas/Responses.QuestionAnswerForGetResponse'
          description: All questions with their answers for this response.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the response.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the response.
      description: Response model for getting a specific form response
    Responses.ListResponse:
      type: object
      required:
        - formId
        - responses
      properties:
        formId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The form ID.
        responses:
          type: array
          items:
            $ref: '#/components/schemas/Responses.ResponseJSON'
          description: All responses for this form.
      description: Response model for listing all responses of a form
    Responses.QuestionAnswerForGetResponse:
      type: object
      required:
        - questionId
        - answer
      properties:
        questionId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The question details.
        answer:
          type: string
          description: The answer value.
      description: Response model for a question with its answer
    Responses.ResponseJSON:
      type: object
      required:
        - id
        - submittedBy
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The response's unique identifier.
        submittedBy:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The user who submitted this response.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the response.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the response.
      description: Response model for a single response in list view
    Responses.SubmitRequest:
      type: object
      required:
        - answers
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Responses.AnswerRequest'
          description: All answers for this form submission.
      description: Request model for submitting a complete form response
    Responses.SubmitResponse:
      type: object
      required:
        - id
        - formId
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The response's unique identifier.
        formId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The form that this response belongs to.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the response.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the response.
      description: Response model for a submitted form response
    Unauthorized:
      type: object
      required:
        - title
        - status
        - type
        - detail
      properties:
        title:
          type: string
          enum:
            - Unauthorized
        status:
          type: number
          enum:
            - 401
        type:
          type: string
          enum:
            - https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401
        detail:
          type: string
    Unit.Base:
      type: object
      required:
        - id
        - name
        - description
        - metadata
        - type
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unit's unique identifier.
        name:
          type: string
          description: The name of the unit or organization
        description:
          type: string
          description: A brief description of the unit or organization
        metadata:
          type: object
          unevaluatedProperties:
            type: string
          description: Metadata for the unit or organization, can include additional information like contact details, address, etc.
        type:
          allOf:
            - $ref: '#/components/schemas/Unit.UnitType'
          description: The type of the unit, either 'unit' or 'organization'
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the unit or organization
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the unit or organization
      description: Base model, containing common fields for both units and organizations.
    Unit.BaseRequest:
      type: object
      required:
        - name
        - description
        - metadata
      properties:
        name:
          type: string
          description: The name of the unit or organization
        description:
          type: string
          description: A brief description of the unit or organization
        metadata:
          type: object
          unevaluatedProperties:
            type: string
          description: Metadata for the unit or organization, can include additional information like contact details, address, etc.
      description: Base Request model, containing common fields for updating units and organizations.
    Unit.CreateOrgRequest:
      type: object
      required:
        - name
        - description
        - metadata
        - type
        - slug
      properties:
        name:
          type: string
          description: The name of the unit or organization
        description:
          type: string
          description: A brief description of the unit or organization
        metadata:
          type: object
          unevaluatedProperties:
            type: string
          description: Metadata for the unit or organization, can include additional information like contact details, address, etc.
        type:
          type: number
          enum:
            - 1
        slug:
          type: string
    Unit.CreateUnitRequest:
      type: object
      required:
        - name
        - description
        - metadata
        - type
      properties:
        name:
          type: string
          description: The name of the unit or organization
        description:
          type: string
          description: A brief description of the unit or organization
        metadata:
          type: object
          unevaluatedProperties:
            type: string
          description: Metadata for the unit or organization, can include additional information like contact details, address, etc.
        type:
          type: number
          enum:
            - 0
    Unit.OrgMember:
      type: object
      required:
        - orgId
        - memberId
      properties:
        orgId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the organization
        memberId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the member
      description: Model representing a member of an organization, linking organization and member by their unique identifiers
    Unit.Organization:
      type: object
      required:
        - id
        - name
        - description
        - metadata
        - type
        - createdAt
        - updatedAt
        - slug
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unit's unique identifier.
        name:
          type: string
          description: The name of the unit or organization
        description:
          type: string
          description: A brief description of the unit or organization
        metadata:
          type: object
          unevaluatedProperties:
            type: string
          description: Metadata for the unit or organization, can include additional information like contact details, address, etc.
        type:
          allOf:
            - $ref: '#/components/schemas/Unit.UnitType'
          description: The type of the unit, either 'unit' or 'organization'
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the unit or organization
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the unit or organization
        slug:
          type: string
          description: Unique slug for the organization, used for URL routing and identification
    Unit.ParentChild:
      type: object
      required:
        - parentId
        - childId
      properties:
        parentId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the parent unit
        childId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the child unit
      description: Model representing a parent-child relationship between units, allowing for hierarchical structures
    Unit.ParentChildRequest:
      type: object
      required:
        - parentId
        - childId
      properties:
        parentId:
          $ref: '#/components/schemas/uuid'
        childId:
          $ref: '#/components/schemas/uuid'
    Unit.Unit:
      type: object
      required:
        - id
        - name
        - description
        - metadata
        - type
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unit's unique identifier.
        name:
          type: string
          description: The name of the unit or organization
        description:
          type: string
          description: A brief description of the unit or organization
        metadata:
          type: object
          unevaluatedProperties:
            type: string
          description: Metadata for the unit or organization, can include additional information like contact details, address, etc.
        type:
          allOf:
            - $ref: '#/components/schemas/Unit.UnitType'
          description: The type of the unit, either 'unit' or 'organization'
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the unit or organization
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the unit or organization
    Unit.UnitMember:
      type: object
      required:
        - unitId
        - memberId
      properties:
        unitId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the unit
        memberId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the member
      description: Model representing a member of a unit, linking unit and member by their unique identifiers
    Unit.UnitType:
      type: number
      enum:
        - 0
        - 1
      description: 'Currently, there are 2 types of units: `unit` and `organization`.'
    Unit.UpdateOrgRequest:
      type: object
      required:
        - name
        - description
        - metadata
        - slug
      properties:
        name:
          type: string
          description: The name of the unit or organization
        description:
          type: string
          description: A brief description of the unit or organization
        metadata:
          type: object
          unevaluatedProperties:
            type: string
          description: Metadata for the unit or organization, can include additional information like contact details, address, etc.
        slug:
          type: string
    Unit.UpdateUnitRequest:
      type: object
      required:
        - name
        - description
        - metadata
      properties:
        name:
          type: string
          description: The name of the unit or organization
        description:
          type: string
          description: A brief description of the unit or organization
        metadata:
          type: object
          unevaluatedProperties:
            type: string
          description: Metadata for the unit or organization, can include additional information like contact details, address, etc.
    User.Role:
      type: string
      enum:
        - user
    User.User:
      type: object
      required:
        - id
        - username
        - name
        - avatarUrl
        - roles
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The user's unique identifier.
        username:
          type: string
          description: The user's username, can change, but must be unique across the system.
        name:
          type: string
          description: The user's name, usually the first and last name.
        avatarUrl:
          type: string
          description: Avatar URL of the user.
        roles:
          type: array
          items:
            $ref: '#/components/schemas/User.Role'
          description: Global role of the user.
    Versions:
      type: string
      enum:
        - 1.0.0
    uuid:
      type: string
      format: uuid
servers:
  - url: https://example.com
    description: Single server endpoint
    variables: {}
