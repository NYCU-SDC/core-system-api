openapi: 3.1.0
info:
  title: Core System API
  version: 1.0.0
tags:
  - name: Healthz
  - name: Auth
  - name: User
  - name: Forms
  - name: Responses
paths:
  /api/auth/login/oauth/{provider}:
    get:
      operationId: Auth_loginGoogle
      parameters:
        - name: provider
          in: path
          required: true
          description: The OAuth2 provider to use for login.
          schema:
            $ref: '#/components/schemas/Auth.OAuthProviders'
        - name: c
          in: query
          required: true
          description: The callback URL of the OAuth2 login. [See details](https://clustron.atlassian.net/wiki/spaces/CS/pages/41320449/Authentication+Process)
          schema:
            type: string
          explode: false
        - name: r
          in: query
          required: false
          description: The redirect URL for login callback.
          schema:
            type: string
          explode: false
      responses:
        '302':
          description: Redirection
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Auth
  /api/auth/refresh/{refreshToken}:
    post:
      operationId: Auth_refreshToken
      parameters:
        - name: refreshToken
          in: path
          required: true
          description: The refresh token to use for refreshing the access token.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth.RefreshToken'
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Auth
  /api/forms:
    post:
      operationId: Forms_createForm
      description: Create a new form.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Form'
      tags:
        - Forms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forms.FormRequest'
    get:
      operationId: Forms_listForms
      description: List all existing forms.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Forms.Form'
      tags:
        - Forms
  /api/forms/{formId}/questions:
    post:
      operationId: Forms_createQuestion
      description: Create a new question for a specific form.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Question'
      tags:
        - Forms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forms.QuestionRequest'
    get:
      operationId: Forms_listQuestions
      description: List all the questions of a specific form.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Forms.Question'
      tags:
        - Forms
  /api/forms/{formId}/questions/{questionId}:
    put:
      operationId: Forms_updateQuestion
      description: Update an existing question by its unique identifier.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: questionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Question'
      tags:
        - Forms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forms.QuestionRequest'
    delete:
      operationId: Forms_deleteQuestion
      description: Delete an existing question by its unique identifier.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: questionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Forms
    get:
      operationId: Responses_getQuestionAnswers
      description: Get all answers for a specific question across all form responses.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: questionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  answers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Responses.Answer'
                required:
                  - answers
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
  /api/forms/{formId}/responses:
    get:
      operationId: Responses_listFormResponses
      description: List all responses for a specific form.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Responses.Response'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
    post:
      operationId: Responses_submitFormResponse
      description: Submit a new response to a form.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responses.Response'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Responses.SubmitFormResponseRequest'
  /api/forms/{formId}/responses/{responseId}:
    get:
      operationId: Responses_getFormResponse
      description: Get a specific response by ID.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: responseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Responses.FormResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
    delete:
      operationId: Responses_deleteFormResponse
      description: Delete a response and all its associated data.
      parameters:
        - name: formId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: responseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      tags:
        - Responses
  /api/forms/{id}:
    put:
      operationId: Forms_updateForm
      description: Update an existing form by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Form'
      tags:
        - Forms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forms.FormRequest'
    delete:
      operationId: Forms_deleteForm
      description: Delete an existing form by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Forms
    get:
      operationId: Forms_getFormById
      description: Get a specific form by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forms.Form'
      tags:
        - Forms
  /api/healthz:
    get:
      operationId: Healthz_checkHealthz
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
        '404':
          description: The server cannot find the requested resource.
      tags:
        - Healthz
  /api/users/me:
    get:
      operationId: User_getMe
      description: Get the current user's information.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User.User'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      tags:
        - User
components:
  schemas:
    Auth.OAuthProviders:
      type: string
      enum:
        - google
    Auth.RefreshToken:
      type: object
      required:
        - accessToken
        - expirationTime
        - refreshToken
      properties:
        accessToken:
          type: string
          description: The access token and formatted as JWT
        expirationTime:
          type: integer
          description: The expiration date of the refresh token.
        refreshToken:
          type: string
          description: The new refresh token.
    Forms.Form:
      type: object
      required:
        - id
        - title
        - description
        - lastEdit
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The form's unique identifier.
        title:
          type: string
          description: The title of the form.
        description:
          type: string
          description: The description written in the form to show user info.
        lastEdit:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The user who last editted the form.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the form.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the form
      description: The structure of a form.
    Forms.FormRequest:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          description: The title of the form.
        description:
          type: string
          description: The description of the form.
      description: The request body for creating/updating a form.
    Forms.Question:
      type: object
      required:
        - id
        - formId
        - required
        - type
        - label
        - description
        - order
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The question's unique identifier.
        formId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: "The form's id that the question belongs to. "
        required:
          type: boolean
          description: Whether the question is required to answer or not.
        type:
          allOf:
            - $ref: '#/components/schemas/Forms.QuestionTypes'
          description: The type of the question.
        label:
          type: string
          description: What is the question.
        description:
          type: string
          description: More details of this question.
        order:
          type: integer
          format: int32
          description: What is the number of this question in the form.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the question.
        updatedAt:
          type: string
          format: date-time
          description: The updated timestamp of the question.
      description: The structure of a question.
    Forms.QuestionRequest:
      type: object
      required:
        - required
        - type
        - label
        - description
        - order
      properties:
        required:
          type: boolean
        type:
          $ref: '#/components/schemas/Forms.QuestionTypes'
        label:
          type: string
        description:
          type: string
        order:
          type: integer
          format: int32
      description: The request body for creating/updating a question.
    Forms.QuestionTypes:
      type: string
      enum:
        - short_text
        - long_text
        - single_choice
        - multiple_choice
        - date
      description: The current types of question
    NotFound:
      type: object
      required:
        - title
        - status
        - type
        - detail
      properties:
        title:
          type: string
          enum:
            - Not Found
        status:
          type: number
          enum:
            - 404
        type:
          type: string
          enum:
            - https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
        detail:
          type: string
    ProblemDetail:
      type: object
      required:
        - title
        - status
        - type
        - detail
      properties:
        title:
          type: string
          description: The problem's title.
        status:
          type: integer
          description: The problem's status code.
        type:
          type: string
          description: Type indicates the URI that identifies the problem type, we use an MDN URI here.
        detail:
          type: string
          description: The problem's detail.
      description: Problem represents a problem detail as defined in RFC 7807
    Responses.Answer:
      type: object
      required:
        - id
        - responseId
        - questionId
        - type
        - value
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The answer's unique identifier.
        responseId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The response this answer belongs to.
        questionId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The question this answer is for.
        type:
          allOf:
            - $ref: '#/components/schemas/Responses.AnswerType'
          description: The type of answer, determines how to parse value.
        value:
          type: string
          description: The answer value stored as string, parsed based on type.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the answer.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the answer.
      description: An individual answer
    Responses.AnswerRequest:
      type: object
      required:
        - questionId
        - value
      properties:
        questionId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The question being answered.
        value:
          type: string
          description: The answer value (format depends on questionType from questionId).
      description: Request model for submitting an individual answer
    Responses.AnswerType:
      type: string
      enum:
        - short_text
        - long_text
        - single_choice
        - multiple_choice
        - date
      description: The available answer types
    Responses.FormResponse:
      type: object
      required:
        - response
        - answers
      properties:
        response:
          allOf:
            - $ref: '#/components/schemas/Responses.Response'
          description: The response metadata.
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Responses.Answer'
          description: All answers for this response.
      description: Complete response with all related data
    Responses.Response:
      type: object
      required:
        - id
        - formId
        - createdAt
        - updatedAt
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The response's unique identifier.
        formId:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The form that this response belongs to.
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the response.
        updatedAt:
          type: string
          format: date-time
          description: The last updated timestamp of the response.
      description: A form response submission
    Responses.SubmitFormResponseRequest:
      type: object
      required:
        - answers
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Responses.AnswerRequest'
          description: All answers for this form submission.
      description: Request model for submitting a complete form response
    Unauthorized:
      type: object
      required:
        - title
        - status
        - type
        - detail
      properties:
        title:
          type: string
          enum:
            - Unauthorized
        status:
          type: number
          enum:
            - 401
        type:
          type: string
          enum:
            - https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401
        detail:
          type: string
    User.Role:
      type: string
      enum:
        - user
    User.User:
      type: object
      required:
        - id
        - username
        - name
        - avatarUrl
        - roles
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/uuid'
          description: The user's unique identifier.
        username:
          type: string
          description: The user's username, can change, but must be unique across the system.
        name:
          type: string
          description: The user's name, usually the first and last name.
        avatarUrl:
          type: string
          description: Avatar URL of the user.
        roles:
          type: array
          items:
            $ref: '#/components/schemas/User.Role'
          description: Global role of the user.
    Versions:
      type: string
      enum:
        - 1.0.0
    uuid:
      type: string
      format: uuid
servers:
  - url: https://example.com
    description: Single server endpoint
    variables: {}
