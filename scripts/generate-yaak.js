#!/usr/bin/env node
/**
 * Generate Yaak workspace, folders, and requests from OpenAPI 3.1 spec
 */

import fs from "fs";
import path from "path";
import yaml from "js-yaml";
import crypto from "crypto";

const SPEC_FILE = "tsp-output/schema/openapi.1.0.0.yaml";
const OUTPUT_DIR = "yaak";
const WORKSPACE_NAME = "Core System";
const WORKSPACE_DESCRIPTION = "Core System API (autogenerated)";
const NOW = () => new Date().toISOString();

// ----------  helpers ----------
const id = (pfx) => `${pfx}_${crypto.randomBytes(5).toString("base64url")}`;
const write = (fname, data) =>
  fs.writeFileSync(path.join(OUTPUT_DIR, fname), yaml.dump(data, { noRefs: true }));

// ----------  init ----------
if (!fs.existsSync(SPEC_FILE)) {
  console.error(`‚ùå Missing ${SPEC_FILE}`);
  process.exit(1);
}
if (!fs.existsSync(OUTPUT_DIR)) fs.mkdirSync(OUTPUT_DIR);

const spec = yaml.load(fs.readFileSync(SPEC_FILE, "utf8"));

// ----------  1Ô∏è‚É£ workspace ----------
const workspaceId = id("wk");
const workspace = {
  type: "workspace",
  model: "workspace",
  id: workspaceId,
  createdAt: NOW(),
  updatedAt: NOW(),
  authentication: {},
  authenticationType: null,
  description: WORKSPACE_DESCRIPTION,
  headers: [],
  name: WORKSPACE_NAME,
  encryptionKeyChallenge: null,
  settingValidateCertificates: true,
  settingFollowRedirects: true,
  settingRequestTimeout: 0,
};
write(`${workspace.id}.yaml`, workspace);
console.log(`üåê Workspace: ${workspace.name} (${workspace.id})`);

// ----------  2Ô∏è‚É£ folders ----------
const tagFolders = {};
for (const tag of spec.tags || []) {
  const fid = id("fl");
  tagFolders[tag.name] = fid;

  const folder = {
    type: "folder",
    model: "folder",
    id: fid,
    createdAt: NOW(),
    updatedAt: NOW(),
    workspaceId,
    folderId: null,
    authentication: {},
    authenticationType: null,
    description: tag.description || "",
    headers: [],
    name: tag.name,
    sortPriority: Math.random() * 300,
  };
  write(`yaak.${fid}.yaml`, folder);
  console.log(`üìÅ Folder: ${tag.name} (${fid})`);
}

// ----------  3Ô∏è‚É£ requests ----------
for (const [url, methods] of Object.entries(spec.paths)) {
  for (const [method, op] of Object.entries(methods)) {
    const rid = id("rq");
    const folderId = tagFolders[op.tags?.[0]] || null;

    // Build Yaak url format
    const yaakUrl = "${[ BASE_URL ]}" + url.replace(/{/g, ":").replace(/}/g, "");

    const urlParams = [];
    if (Array.isArray(op.parameters)) {
      for (const p of op.parameters) {
        if (p.in === "path") {
          urlParams.push({
            enabled: true,
            name: `:${p.name}`,
            value: "",
            id: id("P"),
          });
        }
      }
    }

    const rq = {
      type: "http_request",
      model: "http_request",
      id: rid,
      createdAt: NOW(),
      updatedAt: NOW(),
      workspaceId,
      folderId,
      authentication: {},
      authenticationType: null,
      body: {},
      bodyType: "none",
      description: op.description || "",
      headers: [],
      method: method.toUpperCase(),
      name: op.operationId || `${method.toUpperCase()} ${url}`,
      sortPriority: Math.random() * -1e12,
      url: yaakUrl,
      urlParameters: urlParams,
    };
    write(`yaak.${rid}.yaml`, rq);
    console.log(`üßæ Request: ${rq.name} (${method.toUpperCase()} ${url})`);
  }
}

console.log("\n‚úÖ Done. Yaak workspace generated in ./yaak/");
