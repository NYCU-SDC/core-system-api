#!/usr/bin/env node
/**
 * Generate Yaak workspace, folders, and requests from OpenAPI 3.1 spec
 */

import fs from "fs";
import path from "path";
import yaml from "js-yaml";
import crypto from "crypto";

const SPEC_FILE = "tsp-output/schema/openapi.1.0.0.yaml";
const OUTPUT_DIR = "yaak";
const WORKSPACE_NAME = "Core System";
const WORKSPACE_DESCRIPTION = "Core System API (autogenerated)";
const fmtDate = (d = new Date()) => {
    const pad = (n, len = 2) => String(n).padStart(len, "0");
    return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
};
const NOW = date => fmtDate(date ? new Date(date) : undefined);

// ----------  helpers ----------
const id = (pfx, seed) => {
    const hash = crypto.createHash("sha256").update(seed).digest("base64url");
    return `${pfx}_${hash.slice(0, 10)}`;
};
const write = (fname, data) => {
    const yamlStr = yaml.dump(data, {
        noRefs: true,
        quotingType: "'",
        forceQuotes: false,
        indent: 2,
        lineWidth: -1,
        noArrayIndent: true,
        styles: {
            "!!int": "decimal",
            "!!float": "decimal",
        },
    });

    // Post-process to ensure proper formatting:
    // 1. Remove quotes from date strings and empty strings in specific contexts
    // 2. Ensure sortPriority has .0 suffix
    let formatted = yamlStr
        .replace(/createdAt: '(.+?)'/g, "createdAt: $1")
        .replace(/updatedAt: '(.+?)'/g, "updatedAt: $1")
        .replace(/description: ''/g, "description: ''")
        .replace(/value: '(.+?)'/g, "value: '$1'")
        .replace(/name: '(.+?)'/g, "name: $1")
        .replace(/sortPriority: (-?\d+)$/gm, "sortPriority: $1.0")
        .replace(/sortPriority: (-?\d+)\n/g, "sortPriority: $1.0\n");

    fs.writeFileSync(path.join(OUTPUT_DIR, fname), formatted);
};

// ----------  init ----------
if (!fs.existsSync(SPEC_FILE)) {
    console.error(`❌ Missing ${SPEC_FILE}`);
    process.exit(1);
}
if (fs.existsSync(OUTPUT_DIR)) fs.rmSync(OUTPUT_DIR, { recursive: true, force: true });
fs.mkdirSync(OUTPUT_DIR);

const spec = yaml.load(fs.readFileSync(SPEC_FILE, "utf8"));

// ----------  1️⃣ workspace ----------
const workspaceId = id("wk", WORKSPACE_NAME);
const workspace = {
    type: "workspace",
    model: "workspace",
    id: workspaceId,
    createdAt: NOW("2025-10-13"),
    updatedAt: NOW(),
    authentication: {},
    authenticationType: null,
    description: WORKSPACE_DESCRIPTION,
    headers: [],
    name: WORKSPACE_NAME,
    encryptionKeyChallenge: null,
    settingValidateCertificates: true,
    settingFollowRedirects: true,
    settingRequestTimeout: 0,
};
write(`yaak.${workspace.id}.yaml`, workspace);

// ----------  2️⃣ folders ----------
const tagFolders = {};
for (const tag of spec.tags || []) {
    const fid = id("fl", `folder:${tag.name}`);
    tagFolders[tag.name] = fid;

    const folder = {
        type: "folder",
        model: "folder",
        id: fid,
        createdAt: NOW("2025-10-13"),
        updatedAt: NOW(),
        workspaceId,
        folderId: null,
        authentication: {},
        authenticationType: null,
        description: tag.description || "",
        headers: [],
        name: tag.name,
        sortPriority: (spec.tags || []).indexOf(tag) * 100.0,
    };
    write(`yaak.${fid}.yaml`, folder);
}

// ----------  3️⃣ requests ----------
let requestIndex = 0;
for (const [url, methods] of Object.entries(spec.paths)) {
    for (const [method, op] of Object.entries(methods)) {
        const rid = id("rq", `${method}:${url}`);
        const folderId = tagFolders[op.tags?.[0]] || null;

        const yaakUrl = "${[ BASE_URL ]}" + url.replace(/{/g, ":").replace(/}/g, "");

        const urlParams = [];
        if (Array.isArray(op.parameters)) {
            for (const p of op.parameters) {
                if (p.in === "path") {
                    // Extract example value from schema if available
                    let exampleValue = "";
                    if (p.schema) {
                        if (p.schema.examples && p.schema.examples.length > 0) {
                            exampleValue = String(p.schema.examples[0]);
                        } else if (p.schema.example !== undefined) {
                            exampleValue = String(p.schema.example);
                        } else if (p.schema.default !== undefined) {
                            exampleValue = String(p.schema.default);
                        }
                    }

                    urlParams.push({
                        enabled: true,
                        name: `:${p.name}`,
                        value: exampleValue,
                        id: id("P", `${method}:${url}:path:${p.name}`),
                    });
                } else if (p.in === "query") {
                    // Extract example value from schema if available
                    let exampleValue = "";
                    if (p.schema) {
                        if (p.schema.examples && p.schema.examples.length > 0) {
                            exampleValue = String(p.schema.examples[0]);
                        } else if (p.schema.example !== undefined) {
                            exampleValue = String(p.schema.example);
                        } else if (p.schema.default !== undefined) {
                            exampleValue = String(p.schema.default);
                        }
                    }

                    urlParams.push({
                        enabled: true,
                        name: p.name,
                        value: exampleValue,
                        id: id("P", `${method}:${url}:query:${p.name}`),
                    });
                }
            }
        }

        const rq = {
            type: "http_request",
            model: "http_request",
            id: rid,
            createdAt: NOW("2025-10-13"),
            updatedAt: NOW(),
            workspaceId,
            folderId,
            authentication: {},
            authenticationType: null,
            body: {},
            bodyType: "application/json",
            description: op.description || "",
            headers: [],
            method: method.toUpperCase(),
            name: op.operationId ? op.operationId.split("_")[1] : `${method.toUpperCase()} ${url}`,
            sortPriority: requestIndex * -100.0,
            url: yaakUrl,
            urlParameters: urlParams,
        };
        write(`yaak.${rid}.yaml`, rq);
        requestIndex++;
    }
}

console.log("✅ Done. Yaak workspace generated in ./yaak/");
